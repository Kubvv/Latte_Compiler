-- Programs ------------------------------------------------

entrypoints Program ;

PProgram.  Program ::= [TopDef] ;

FnDef.     TopDef ::= Type Ident "(" [Arg] ")" Block ;
ClsDef.    TopDef ::= "class" Ident ClsInh "{" [ClsElemDef] "}" ;
separator nonempty TopDef "" ;

NoInh.     ClsInh ::= ;
Inh.       ClsInh ::= "extends" Ident ;

VArg.	   Arg ::= Type Ident;
separator  Arg "," ;

MetDef.    ClsElemDef ::= Type Ident "(" [Arg] ")" Block ;
AtrDef.    ClsElemDef ::= Type Ident ";" ;
separator  ClsElemDef "" ;

-- Statements ----------------------------------------------

BBlock.    Block ::= "{" [Stmt] "}" ;

Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;

Ass.       Stmt ::= Expr "=" Expr  ";" ;
Incr.      Stmt ::= Expr "++"  ";" ;
Decr.      Stmt ::= Expr "--"  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;
SExp.      Stmt ::= Expr  ";" ;
separator  Stmt "" ;

-- Types ---------------------------------------------------

Var.       Type ::= "var" ;
Arr.       Type ::= Type "[]" ;
Cls.       Type ::= Ident ;
Void.      Type ::= "void" ;

-- Expressions ---------------------------------------------

ECast.     Expr7 ::= "(" Ident ")" Expr6 ;

EVar.      Expr6 ::= Ident ;
ELitInt.   Expr6 ::= Integer ;
ELitNull.  Expr6 ::= "null" ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EArrAcs.   Expr6 ::= Ident "[" Expr "]" ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EELem.     Expr6 ::= Expr6 "." Ident ;
ENewArr.   Expr6 ::= "new" Type "[" Expr "]" ;
ENew.      Expr6 ::= "new" Type ; 
EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 7 ;
separator  Expr "," ;

-- Operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- Comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;

