<=======================>
examples\test.lat
<== Stderr ==>
OK
<== Stdout ==>
int[] sum(int[] a, int[] b)
{
	int[] res = new int[a.length];
	int i = 0;
	while ((i < a.length))
		{
			res[i] = (a[i] + b[i]);
			i = (i + 1);
		}
	return res;
}
int main()
{
	string s = "du\nska";
	return 0;
}


<=======================>
examples\bad\bad001.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
syntax error at line 1, column 1 before `/'
<== Stdout ==>


<=======================>
examples\bad\bad002.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
syntax error at end of file
<== Stdout ==>


<=======================>
examples\bad\bad003.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No main function found
<== Stdout ==>


<=======================>
examples\bad\bad004.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
syntax error at line 1, column 9 before `)'
<== Stdout ==>


<=======================>
examples\bad\bad005.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
syntax error at line 1, column 4 before `('
<== Stdout ==>


<=======================>
examples\bad\bad006.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Unexpected token at line 2, position 9, namely x
<== Stdout ==>


<=======================>
examples\bad\bad007.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Redefinition of identifier x at line 3, position 9 which was previously declared at line 2, position 9
<== Stdout ==>


<=======================>
examples\bad\bad008.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No return found for block at line 1, position 14
<== Stdout ==>


<=======================>
examples\bad\bad009.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 3, position 9, found type bool cannot be casted to expected type int
<== Stdout ==>


<=======================>
examples\bad\bad010.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No return value found at line 3, position 17
<== Stdout ==>


<=======================>
examples\bad\bad011.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 2, position 6, found type bool cannot be casted to expected type int
<== Stdout ==>


<=======================>
examples\bad\bad012.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No return found for block at line 6, position 20
<== Stdout ==>


<=======================>
examples\bad\bad013.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Operator at line 3, position 16 does not accept given types of arguments string and int
<== Stdout ==>


<=======================>
examples\bad\bad015.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 4, position 18, found type string cannot be casted to expected type int
<== Stdout ==>


<=======================>
examples\bad\bad016.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 4, position 21, found type int cannot be casted to expected type string
<== Stdout ==>


<=======================>
examples\bad\bad017.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Wrong number of arguments in function call, expected 1 arguments, found 0 arguments at line 4, position 17
<== Stdout ==>


<=======================>
examples\bad\bad018.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Wrong number of arguments in function call, expected 2 arguments, found 1 arguments at line 4, position 17
<== Stdout ==>


<=======================>
examples\bad\bad019.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Wrong number of arguments in function call, expected 1 arguments, found 2 arguments at line 4, position 17
<== Stdout ==>


<=======================>
examples\bad\bad020.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Operator at line 4, position 14 does not accept given types of arguments string and bool
<== Stdout ==>


<=======================>
examples\bad\bad021.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No return found for block at line 5, position 12
<== Stdout ==>


<=======================>
examples\bad\bad022.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 4, position 6, found type string cannot be casted to expected type int
<== Stdout ==>


<=======================>
examples\bad\bad023.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 4, position 9, found type int cannot be casted to expected type string
<== Stdout ==>


<=======================>
examples\bad\bad024.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No return found for block at line 1, position 12
<== Stdout ==>


<=======================>
examples\bad\bad025.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No return found for block at line 5, position 14
<== Stdout ==>


<=======================>
examples\bad\bad026.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 5, position 3, found type string cannot be casted to expected type int
<== Stdout ==>


<=======================>
examples\bad\bad027.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 5, position 2, found type int cannot be casted to expected type string
<== Stdout ==>


<=======================>
examples\bad\infinite_loop\infinite_while.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	while (True)
		{

		}
}


<=======================>
examples\bad\my\nameAttributeInChild.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Name e at line 22, position 3 is already declared as a method in a parent class
<== Stdout ==>


<=======================>
examples\bad\my\nameAttributeInChildAndParent.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Duplicated attribute name b at line 22, position 3 is already declared in a parent class 
<== Stdout ==>


<=======================>
examples\bad\my\nameMethodInChild.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Name b at line 29, position 3 is already declared as an attribute in a parent class
<== Stdout ==>


<=======================>
examples\bad\my\selfAsAtrName.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Cannot declare a variable named 'self' inside a class at line 2, position 3
<== Stdout ==>


<=======================>
examples\bad\my\selfAsVarName.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Cannot declare a variable named 'self' inside a class at line 5, position 5
<== Stdout ==>


<=======================>
examples\bad\runtime\error.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	error();
	return 0;
}


<=======================>
examples\bad\semantic\big_number.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Constant defined at line 3, position 13 is out of integer range
<== Stdout ==>


<=======================>
examples\bad\semantic\declaration_in_if.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
The statement of an if or while cannot be a var declartion statement at line 4, position 9
<== Stdout ==>


<=======================>
examples\bad\semantic\declaration_in_if_condition.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
syntax error at line 3, column 12 before `i'
<== Stdout ==>


<=======================>
examples\bad\semantic\declaration_in_while.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
The statement of an if or while cannot be a var declartion statement at line 4, position 9
<== Stdout ==>


<=======================>
examples\bad\semantic\function_with_void_argument.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Incorrect use of void type at line 8, position 7
<== Stdout ==>


<=======================>
examples\bad\semantic\main_with_argument.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Wrong main definition exception at line 4, position 1, expected return type of int and no arguments
<== Stdout ==>


<=======================>
examples\bad\semantic\main_with_void_type.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Wrong main definition exception at line 4, position 1, expected return type of int and no arguments
<== Stdout ==>


<=======================>
examples\bad\semantic\negation.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Cannot negate a non numerical type string at line 4, position 5
<== Stdout ==>


<=======================>
examples\bad\semantic\no_main.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
No main function found
<== Stdout ==>


<=======================>
examples\bad\semantic\redefined_functions.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Duplicated function name foo at line 12, position 1
<== Stdout ==>


<=======================>
examples\bad\semantic\redefinition_of_printInt.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Default function named printInt overriden at line 8, position 1
<== Stdout ==>


<=======================>
examples\bad\semantic\return_void_result.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Can't return a value with type void at line 9, position 5
<== Stdout ==>


<=======================>
examples\bad\semantic\string_decrementation.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Operator at line 4, position 5 does not accept given types of arguments string and int
<== Stdout ==>


<=======================>
examples\bad\semantic\string_incrementation.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Operator at line 4, position 5 does not accept given types of arguments string and int
<== Stdout ==>


<=======================>
examples\bad\semantic\string_sub.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Cannot negate a non numerical type string at line 4, position 7
<== Stdout ==>


<=======================>
examples\bad\semantic\undeclared_variable_as_instruction.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Unexpected token at line 3, position 5, namely i
<== Stdout ==>


<=======================>
examples\bad\semantic\variable_with_void_type.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Incorrect use of void type at line 5, position 4
<== Stdout ==>


<=======================>
examples\bad\semantic\while_true_bad_return_type.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
Type mismatch at line 7, position 13, found type string cannot be casted to expected type int
<== Stdout ==>


<=======================>
examples\extensions\arrays1\array001.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int[] a = new int[10];
	int j = 0;
	while ((j < a.length))
		{
			a[j] = j;
			j = (j + 1);
		}
	{
		int ind_x = 0;
		int[] tab_x = a;
		while ((ind_x < tab_x.length))
			{
				int x = tab_x[ind_x];
				printInt(x);
				ind_x = (ind_x + 1);
			}
	}
	int x = 45;
	printInt(45);
	return 0;
}


<=======================>
examples\extensions\arrays1\array002.lat
<== Stderr ==>
OK
<== Stdout ==>
int[] doubleArray(int[] a)
{
	int[] res = new int[a.length];
	int i = 0;
	{
		int ind_n = 0;
		int[] tab_n = a;
		while ((ind_n < tab_n.length))
			{
				int n = tab_n[ind_n];
				{
					res[i] = (n * 2);
					i = (i + 1);
				}
				ind_n = (ind_n + 1);
			}
	}
	return res;
}
void shiftLeft(int[] a)
{
	int x = a[0];
	int i = 0;
	while ((i < (a.length + -1)))
		{
			a[i] = a[(i + 1)];
			i = (i + 1);
		}
	a[(a.length + -1)] = x;
	return;
}
int scalProd(int[] a, int[] b)
{
	int res = 0;
	int i = 0;
	while ((i < a.length))
		{
			res = ((a[i] * b[i]) + res);
			i = (i + 1);
		}
	return res;
}
int main()
{
	int[] a = new int[5];
	int i = 0;
	while ((i < a.length))
		{
			a[i] = i;
			i = (i + 1);
		}
	shiftLeft(a);
	int[] b = doubleArray(a);
	{
		int ind_x = 0;
		int[] tab_x = a;
		while ((ind_x < tab_x.length))
			{
				int x = tab_x[ind_x];
				printInt(x);
				ind_x = (ind_x + 1);
			}
	}
	{
		int ind_x = 0;
		int[] tab_x = b;
		while ((ind_x < tab_x.length))
			{
				int x = tab_x[ind_x];
				printInt(x);
				ind_x = (ind_x + 1);
			}
	}
	printInt(scalProd(a, b));
	return 0;
}


<=======================>
examples\extensions\objects1\counter.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	Counter c = null;
	c = new Counter;
	c.incr();
	c.incr();
	c.incr();
	int x = c.value();
	printInt(x);
	return 0;
}
class Counter extends Object
{
	int val;
	void incr()
	{
		self.val = (self.val + 1);
		return;
	}
	int value()
	{
		return self.val;
	}
}


<=======================>
examples\extensions\objects1\linked.lat
<== Stderr ==>
OK
<== Stdout ==>
class Node extends Object
{
	int elem;
	Node next;
	void setElem(int c)
	{
		self.elem = c;
		return;
	}
	void setNext(Node n)
	{
		self.next = n;
		return;
	}
	int getElem()
	{
		return self.elem;
	}
	Node getNext()
	{
		return self.next;
	}
}
class Stack extends Object
{
	Node head;
	void push(int c)
	{
		Node newHead = new Node;
		newHead.setElem(c);
		newHead.setNext(self.head);
		self.head = newHead;
		return;
	}
	bool isEmpty()
	{
		if ((self.head == null))
			return True;
		else
			return False;
	}
	int top()
	{
		return self.head.getElem();
	}
	void pop()
	{
		self.head = self.head.getNext();
		return;
	}
}
int main()
{
	Stack s = new Stack;
	int i = 0;
	while ((i < 10))
		{
			s.push(i);
			i = (i + 1);
		}
	while (!s.isEmpty())
		{
			printInt(s.top());
			s.pop();
		}
	return 0;
}


<=======================>
examples\extensions\objects1\points.lat
<== Stderr ==>
OK
<== Stdout ==>
class Point2 extends Object
{
	int x;
	int y;
	void move(int dx, int dy)
	{
		self.x = (self.x + dx);
		self.y = (self.y + dy);
		return;
	}
	int getX()
	{
		return self.x;
	}
	int getY()
	{
		return self.y;
	}
}
class Point3 extends Point2
{
	int z;
	void moveZ(int dz)
	{
		self.z = (self.z + dz);
		return;
	}
	int getZ()
	{
		return self.z;
	}
}
class Point4 extends Point3
{
	int w;
	void moveW(int dw)
	{
		self.w = (self.w + dw);
		return;
	}
	int getW()
	{
		return self.w;
	}
}
int main()
{
	Point2 p = (Point2)(new Point3);
	Point3 q = new Point3;
	Point4 r = new Point4;
	q.move(2, 4);
	q.moveZ(7);
	p = q;
	p.move(3, 5);
	r.move(1, 3);
	r.moveZ(6);
	r.moveW(2);
	printInt(p.getX());
	printInt(p.getY());
	printInt(q.getZ());
	printInt(r.getW());
	return 0;
}


<=======================>
examples\extensions\objects1\queue.lat
<== Stderr ==>
OK
<== Stdout ==>
class Node extends Object
{
	int elem;
	Node next;
	void setElem(int e)
	{
		self.elem = e;
		return;
	}
	void setNext(Node n)
	{
		self.next = n;
		return;
	}
	int getElem()
	{
		return self.elem;
	}
	Node getNext()
	{
		return self.next;
	}
}
class IntQueue extends Object
{
	Node front;
	Node rear;
	bool isEmpty()
	{
		if ((self.front == null))
			return True;
		else
			return False;
	}
	void insert(int x)
	{
		Node last = new Node;
		last.setElem(x);
		if (self.isEmpty())
			self.front = last;
		else
			self.rear.setNext(last);
		self.rear = last;
		return;
	}
	int first()
	{
		return self.front.getElem();
	}
	void rmFirst()
	{
		self.front = self.front.getNext();
		return;
	}
	int size()
	{
		Node n = self.front;
		int res = 0;
		while (!(n == null))
			{
				n = n.getNext();
				res = (res + 1);
			}
		return res;
	}
}
int f(int x)
{
	return ((x * x) + 3);
}
int main()
{
	IntQueue q = new IntQueue;
	q.insert(f(3));
	q.insert(5);
	q.insert(7);
	printInt(q.first());
	q.rmFirst();
	printInt(q.size());
	return 0;
}


<=======================>
examples\extensions\objects2\shapes.lat
<== Stderr ==>
OK
<== Stdout ==>
class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		self.elem = c;
		return;
	}
	void setNext(Node n)
	{
		self.next = n;
		return;
	}
	Shape getElem()
	{
		return self.elem;
	}
	Node getNext()
	{
		return self.next;
	}
}
class Stack extends Object
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem(c);
		newHead.setNext(self.head);
		self.head = newHead;
		return;
	}
	bool isEmpty()
	{
		if ((self.head == null))
			return True;
		else
			return False;
	}
	Shape top()
	{
		return self.head.getElem();
	}
	void pop()
	{
		self.head = self.head.getNext();
		return;
	}
}
class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
		return;
	}
	void tellAgain()
	{
		printString("I'm just a shape");
		return;
	}
}
class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
		return;
	}
}
class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
		return;
	}
}
class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
		return;
	}
}
int main()
{
	Stack stk = new Stack;
	Shape s = new Shape;
	stk.push(s);
	s = new Rectangle;
	stk.push(s);
	s = new Square;
	stk.push(s);
	s = new Circle;
	stk.push(s);
	while (!stk.isEmpty())
		{
			s = stk.top();
			s.tell();
			s.tellAgain();
			stk.pop();
		}
	return 0;
}


<=======================>
examples\extensions\struct\list.lat
<== Stderr ==>
OK
<== Stdout ==>
class list extends Object
{
	int elem;
	list next;
}
int main()
{
	printInt(length(fromTo(1, 50)));
	printInt(length2(fromTo(1, 100)));
	return 0;
}
int head(list xs)
{
	return xs.elem;
}
list cons(int x, list xs)
{
	list n = null;
	n = new list;
	n.elem = x;
	n.next = xs;
	return n;
}
int length(list xs)
{
	if ((xs == null))
		return 0;
	else
		return (length(xs.next) + 1);
}
list fromTo(int m, int n)
{
	if ((m > n))
		return null;
	else
		return cons(m, fromTo((m + 1), n));
}
int length2(list xs)
{
	int res = 0;
	while (!(xs == null))
		{
			res = (res + 1);
			xs = xs.next;
		}
	return res;
}


<=======================>
examples\good\core001.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(fac(10));
	printInt(rfac(10));
	printInt(mfac(10));
	printInt(ifac(10));
	string r = null;
	{
		int n = 10;
		int r = 1;
		while ((n > 0))
			{
				r = (r * n);
				n = (n - 1);
			}
		printInt(r);
	}
	printString(repStr("=", 60));
	printString("hello */");
	printString("/* world");
	return 0;
}
int fac(int a)
{
	int r = 0;
	int n = 0;
	r = 1;
	n = a;
	while ((n > 0))
		{
			r = (r * n);
			n = (n + -1);
		}
	return r;
}
int rfac(int n)
{
	if ((n == 0))
		return 1;
	else
		return (rfac((n + -1)) * n);
}
int mfac(int n)
{
	if ((n == 0))
		return 1;
	else
		return (nfac((n + -1)) * n);
}
int nfac(int n)
{
	if ((n != 0))
		return (mfac((n + -1)) * n);
	else
		return 1;
}
int ifac(int n)
{
	return ifac2f(1, n);
}
int ifac2f(int l, int h)
{
	if ((l == h))
		return l;
	else
		;
	if ((l > h))
		return 1;
	else
		;
	int m = 0;
	m = ((l + h) / 2);
	return (ifac2f(l, m) * ifac2f((m + 1), h));
}
string repStr(string s, int n)
{
	string r = "";
	int i = 0;
	while ((i < n))
		{
			r = r.concat(s);
			i = (i + 1);
		}
	return r;
}


<=======================>
examples\good\core002.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	foo();
	return 0;
}
void foo()
{
	printString("foo");
	return;
}


<=======================>
examples\good\core003.lat
<== Stderr ==>
OK
<== Stdout ==>
int f()
{
	return 0;
}
int g()
{
	return 0;
}
void p()
{
	return;
}
int main()
{
	p();
	return 0;
}


<=======================>
examples\good\core004.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	{
		printInt(42);
	}
	return 0;
}


<=======================>
examples\good\core005.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 0;
	int y = 56;
	{
		x = 2;
	}
	printInt(0);
	return 0;
}


<=======================>
examples\good\core006.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 0;
	int y = 0;
	x = 45;
	y = -36;
	printInt(45);
	printInt(-36);
	return 0;
}


<=======================>
examples\good\core007.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 7;
	printInt(7);
	return 0;
}


<=======================>
examples\good\core008.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 0;
	int y = 7;
	x = -1234234;
	printInt(-1234234);
	printInt(7);
	return 0;
}


<=======================>
examples\good\core009.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = foo();
	printInt(x);
	return 0;
}
int foo()
{
	return 10;
}


<=======================>
examples\good\core010.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(fac(5));
	return 0;
}
int fac(int a)
{
	int r = 0;
	int n = 0;
	r = 1;
	n = a;
	while ((n > 0))
		{
			r = (r * n);
			n = (n + -1);
		}
	return r;
}


<=======================>
examples\good\core011.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(-1);
	return 0;
}


<=======================>
examples\good\core012.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 56;
	int y = -23;
	printInt(33);
	printInt(79);
	printInt(-1288);
	printInt(22);
	printInt(0);
	printBool(True);
	printBool(False);
	printString("string concatenation");
	return 0;
}
void printBool(bool b)
{
	if (b)
		{
			printString("true");
			return;
		}
	else
		{
			printString("false");
			return;
		}
	return;
}


<=======================>
examples\good\core013.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printString("&&");
	printBool((test(-1) && test(0)));
	printBool((test(-2) && test(1)));
	printBool((test(3) && test(-5)));
	printBool((test(234234) && test(21321)));
	printString("||");
	printBool((test(-1) || test(0)));
	printBool((test(-2) || test(1)));
	printBool((test(3) || test(-5)));
	printBool((test(234234) || test(21321)));
	printString("!");
	printBool(True);
	printBool(False);
	return 0;
}
void printBool(bool b)
{
	if (!b)
		{
			printString("false");
		}
	else
		{
			printString("true");
		}
	return;
}
bool test(int i)
{
	printInt(i);
	if ((i > 0))
		return True;
	else
		return False;
}


<=======================>
examples\good\core014.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int lo = 0;
	int hi = 0;
	int mx = 0;
	lo = 1;
	hi = 1;
	mx = 5000000;
	printInt(1);
	while ((hi < 5000000))
		{
			printInt(hi);
			hi = (lo + hi);
			lo = (-lo + hi);
		}
	return 0;
}


<=======================>
examples\good\core015.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(ev(17));
	return 0;
}
int ev(int y)
{
	if ((y > 0))
		return ev((y + -2));
	else
		if ((y < 0))
			return 0;
		else
			return 1;
}


<=======================>
examples\good\core016.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int y = 17;
	while ((y > 0))
		y = (y + -2);
	if ((y < 0))
		{
			printInt(0);
			return 0;
		}
	else
		{
			printInt(1);
			return 0;
		}
}


<=======================>
examples\good\core017.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 4;
	{
		printBool(True);
	}
	printBool(True);
	printBool(False);
	printBool(True);
	printBool(implies(False, False));
	printBool(implies(False, True));
	printBool(implies(True, False));
	printBool(implies(True, True));
	return 0;
}
bool dontCallMe(int x)
{
	printInt(x);
	return True;
}
void printBool(bool b)
{
	if (b)
		{
			printString("true");
		}
	else
		{
			printString("false");
		}
	return;
}
bool implies(bool x, bool y)
{
	if ((!x || (x == y)))
		return True;
	else
		return False;
}


<=======================>
examples\good\core018.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = readInt();
	string y = readString();
	string z = readString();
	printInt((x + -5));
	printString(y.concat(z));
	return 0;
}


<=======================>
examples\good\core019.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int i = 78;
	{
		int i = 1;
		printInt(1);
	}
	printInt(78);
	while ((i > 76))
		{
			i = (i - 1);
			printInt(i);
			int i = (i + 7);
			printInt(i);
		}
	printInt(i);
	if ((i > 4))
		{
			int i = 4;
			printInt(4);
		}
	else
		{
			printString("foo");
		}
	printInt(i);
	return 0;
}


<=======================>
examples\good\core020.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	p();
	printInt(1);
	return 0;
}
void p()
{
	return;
}


<=======================>
examples\good\core021.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	{
		printInt(1);
		return 0;
	}
}


<=======================>
examples\good\core022.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 0;
	printInt(0);
	return 0;
}


<=======================>
examples\good\core023.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int a = 1;
	int b = 2;
	int c = 1;
	int d = 2;
	int e = 1;
	int f = 2;
	int g = 1;
	int h = 2;
	int i = 1;
	int j = 2;
	int k = 1;
	int l = 2;
	int m = 1;
	int n = 2;
	return foo(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2);
}
int foo(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, int n)
{
	int r = (((((((((((((((a * 2) + (b / 2)) + (j / 2)) + c) + d) + e) + f) + g) + h) + i) + k) + l) + m) + n) % 10);
	printInt(r);
	return r;
}


<=======================>
examples\good\core024.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	f(1, 2);
	return 0;
}
void f(int x, int y)
{
	if (((y > x) || e()))
		printString("yes");
	else
		;
	return;
}
bool e()
{
	printString("NOOO");
	return False;
}


<=======================>
examples\good\core025.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(-4);
	return 0;
}


<=======================>
examples\good\core026.lat
<== Stderr ==>
OK
<== Stdout ==>
int d()
{
	return 0;
}
int s(int x)
{
	return (x + 1);
}
int main()
{
	printInt(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(d())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	return 0;
}


<=======================>
examples\good\core027.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	f("bad");
	return 0;
}
void f(string arg)
{
	arg = "good";
	printString("good");
	return;
}


<=======================>
examples\good\core028.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int x = 0;
	printInt(0);
	return 0;
}


<=======================>
examples\good\core031.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(f(1, -1));
	return 0;
}
int f(int a, int b)
{
	if ((((a > 0) && (b > 0)) || ((a < 0) && (b < 0))))
		{
			return 7;
		}
	else
		{
			return 42;
		}
}


<=======================>
examples\good\core032.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	{
		printInt(42);
	}
	return 0;
}


<=======================>
examples\good\arrays\array_length.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(new int[1].length);
	return 0;
}


<=======================>
examples\good\arrays\array_new.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	string[] a = new string[1];
	return 0;
}


<=======================>
examples\good\arrays\array_read.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	new int[1][0];
	return 0;
}


<=======================>
examples\good\arrays\array_string.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	string[] a = new string[1];
	a[0] = "abc";
	printString(a[0]);
	return 0;
}


<=======================>
examples\good\arrays\heapsort.lat
<== Stderr ==>
OK
<== Stdout ==>
void swap(int[] tab, int x, int y)
{
	int temp = tab[x];
	tab[x] = tab[y];
	tab[y] = temp;
	return;
}
void heapDown(int[] heap, int index, int heapSize)
{
	while (((index * 2) < (heapSize + -1)))
		{
			int left = ((index * 2) + 1);
			int right = (left + 1);
			int max = left;
			if (((right < heapSize) && (heap[right] > heap[max])))
				{
					max = right;
				}
			else
				;
			if ((heap[max] > heap[index]))
				{
					swap(heap, max, index);
					index = max;
				}
			else
				{
					return;
				}
		}
	return;
}
int extractMax(int[] heap, int heapSize)
{
	int max = heap[0];
	heap[0] = heap[(heapSize + -1)];
	heapDown(heap, 0, (heapSize + -1));
	return max;
}
void heapSort(int[] heap)
{
	int i = (heap.length / 2);
	while ((i >= 0))
		{
			heapDown(heap, i, heap.length);
			i = (i - 1);
		}
	i = (heap.length + -1);
	while ((i >= 0))
		{
			heap[i] = extractMax(heap, (i + 1));
			i = (i - 1);
		}
	return;
}
int main()
{
	int n = readInt();
	int[] tab = new int[n];
	int i = 0;
	while ((i < n))
		{
			tab[i] = readInt();
			i = (i + 1);
		}
	heapSort(tab);
	{
		int ind_elem = 0;
		int[] tab_elem = tab;
		while ((ind_elem < tab_elem.length))
			{
				int elem = tab_elem[ind_elem];
				{
					printInt(elem);
				}
				ind_elem = (ind_elem + 1);
			}
	}
	return 0;
}


<=======================>
examples\good\basic\add.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(2);
	return 0;
}


<=======================>
examples\good\basic\bool_operations.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	b((t(1) && f(2)));
	b((t(3) && t(4)));
	b((t(5) || t(6)));
	b((f(7) && t(8)));
	b(((t(9) && t(10)) && t(11)));
	b((f(12) || (f(13) && t(14))));
	return 0;
}
bool f(int a)
{
	printInt(a);
	return False;
}
bool t(int a)
{
	return !f(a);
}
void b(bool a)
{
	if (a)
		printString("true");
	else
		printString("false");
	return;
}


<=======================>
examples\good\basic\bool_overoptymization.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	(print() && False);
	return 0;
}
bool print()
{
	printString("ahoj");
	return True;
}


<=======================>
examples\good\basic\compare.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printString("4");
	printString("4");
	;
	;
	printString("6");
	printString("6");
	;
	;
	return 0;
}


<=======================>
examples\good\basic\concatenation.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printString("ab");
	return 0;
}


<=======================>
examples\good\basic\empty_if.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	;
	printInt(1);
	return 0;
}


<=======================>
examples\good\basic\empty_instructions.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	;
	;
	;
	;
	;
	return 0;
}


<=======================>
examples\good\basic\empty_while.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	;
	printInt(1);
	return 0;
}


<=======================>
examples\good\basic\escaped_string.lat
<== Stderr ==>
OK
<== Stdout ==>
int f(int p)
{
	int c = ((p * 2) + p);
	printString("\"\npop\npowrot:\ngetstatic java/lang/System/out Ljava/io/PrintStream;\nldc \"zle \"\ninvokevirtual java/io/PrintStream/print(Ljava/lang/String;)V\ngoto powrot\nldc \"");
	return c;
}
int main()
{
	return (f(1) + -3);
}


<=======================>
examples\good\basic\fibonacci.lat
<== Stderr ==>
OK
<== Stdout ==>
int fibonacci(int n)
{
	if ((n <= 1))
		{
			return n;
		}
	else
		;
	int fib_a = 0;
	int fib_b = 1;
	int tmp = 0;
	int i = 2;
	while ((i <= n))
		{
			tmp = (fib_b + fib_a);
			fib_a = fib_b;
			fib_b = tmp;
			i = (i + 1);
		}
	return fib_b;
}
int main()
{
	int i = readInt();
	if ((i >= 0))
		{
			printInt(fibonacci(i));
			return 0;
		}
	else
		{
			printString("Expected a non-negative integer, but got:");
			printInt(i);
			return 1;
		}
}


<=======================>
examples\good\basic\fine_ident.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int abcABC000___ = 0;
	return 0;
}


<=======================>
examples\good\basic\mod.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(2);
	printInt(1);
	return 0;
}


<=======================>
examples\good\basic\negation.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(1);
	int i = 1;
	printInt(-1);
	printInt(3);
	return 0;
}


<=======================>
examples\good\basic\print_complicated_string.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printString("\\a\n\n\tb\"");
	return 0;
}


<=======================>
examples\good\basic\print_int.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(1);
	return 0;
}


<=======================>
examples\good\basic\print_string.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printString("abc");
	return 0;
}


<=======================>
examples\good\basic\scopes.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int i = 0;
	printInt(0);
	{
		int i = 1;
		printInt(1);
	}
	printInt(0);
	{
		int i = 2;
		printInt(2);
	}
	printInt(0);
	return 0;
}


<=======================>
examples\good\basic\void_return.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	run();
	return 0;
}
void run()
{
	printInt(0);
	return;
}


<=======================>
examples\good\basic\while_true.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	while (True)
		{
			return 0;
		}
}


<=======================>
examples\good\basic\while_true2.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	while (True)
		{
			int x = 0;
			x = readInt();
			if ((x == 1))
				return 0;
			else
				printString("jeszcze raz");
		}
}


<=======================>
examples\good\hardcore\big_string.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	string s1 = "";
	string s2 = "";
	int i = 0;
	while ((i < 102400))
		{
			s1 = s1.concat("a");
			if (((i % 2) == 0))
				s2 = s2.concat("a");
			else
				;
			i = (i + 1);
		}
	printString("Done");
	return 0;
}


<=======================>
examples\good\hardcore\tail_call_optymization.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	printInt(sum(1000000, 0));
	return 0;
}
int sum(int z, int a)
{
	if ((z == 0))
		return a;
	else
		;
	int y = z;
	if (((y % 2) == 1))
		y = (z * -1);
	else
		;
	return sum((z + -1), (a + y));
}


<=======================>
examples\good\virtual\polymorphism.lat
<== Stderr ==>
OK
<== Stdout ==>
class A extends Object
{
	void print()
	{
		printString("A");
		return;
	}
}
class B extends A
{
	void print()
	{
		printString("B");
		return;
	}
}
class C extends B
{
	void print()
	{
		printString("C");
		return;
	}
}
class D extends C
{
	void print()
	{
		printString("D");
		return;
	}
}
B fun()
{
	return (B)(new C);
}
A fun2(B param)
{
	return (A)(param);
}
int main()
{
	A z1 = (A)(new B);
	z1.print();
	A z2 = (A)(fun());
	z2.print();
	z2 = new B;
	z2.print();
	A z3 = fun2(new C);
	z3.print();
	C[] tab = null;
	tab = new C[3];
	tab[0] = new C;
	tab[1] = new D;
	tab[2] = new D;
	{
		int ind_elem = 0;
		C[] tab_elem = tab;
		while ((ind_elem < tab_elem.length))
			{
				B elem = (B)(tab_elem[ind_elem]);
				{
					fun2(elem).print();
				}
				ind_elem = (ind_elem + 1);
			}
	}
	B t1 = new B;
	A t2 = (A)(t1);
	if (t1.equals(t2))
		{
			printString("tak");
		}
	else
		;
	if (!t1.equals(t2))
		{
			printString("nie");
		}
	else
		;
	return 0;
}


<=======================>
examples\gr5\bfs.lat
<== Stderr ==>
OK
<== Stdout ==>
class Node extends Object
{
	bool visited;
	int value;
	List neighbours;
	void init(int val)
	{
		self.visited = False;
		self.value = val;
		self.neighbours = null;
		return;
	}
	bool isVisited()
	{
		return self.visited;
	}
	void markAsVisited()
	{
		self.visited = True;
		return;
	}
	int getValue()
	{
		return self.value;
	}
	List getNeighbours()
	{
		return self.neighbours;
	}
	void addNeighbour(Node n)
	{
		if ((self.neighbours == null))
			{
				self.neighbours = new List;
				self.neighbours.makeSingleton(n);
			}
		else
			{
				List newNeighbours = new List;
				newNeighbours.cons(n, self.neighbours);
				self.neighbours = newNeighbours;
			}
		return;
	}
}
class List extends Object
{
	Node head;
	List tail;
	void makeSingleton(Node node)
	{
		self.head = node;
		self.tail = null;
		return;
	}
	Node getHead()
	{
		return self.head;
	}
	List getTail()
	{
		return self.tail;
	}
	void cons(Node newHead, List newTail)
	{
		self.head = newHead;
		self.tail = newTail;
		return;
	}
}
class Queue extends Object
{
	List first;
	List last;
	Node get()
	{
		if ((self.first == null))
			return null;
		else
			;
		Node retEl = self.first.head;
		self.first = self.first.tail;
		if ((self.first == null))
			self.last = null;
		else
			;
		return retEl;
	}
	void put(Node n)
	{
		List newTail = new List;
		newTail.makeSingleton(n);
		if ((self.first == null))
			{
				self.first = newTail;
				self.last = newTail;
			}
		else
			{
				self.last.cons(self.last.getHead(), newTail);
				self.last = newTail;
			}
		return;
	}
	bool isEmpty()
	{
		if ((self.first == null))
			return True;
		else
			return False;
	}
}
int main()
{
	Node graph = prepareData();
	graph.markAsVisited();
	Queue q = new Queue;
	q.put(graph);
	bfs(q);
	return 0;
}
Node prepareData()
{
	Node n1 = new Node;
	n1.init(1);
	Node n2 = new Node;
	n2.init(2);
	Node n3 = new Node;
	n3.init(3);
	Node n4 = new Node;
	n4.init(4);
	Node n5 = new Node;
	n5.init(5);
	Node n6 = new Node;
	n6.init(6);
	Node n7 = new Node;
	n7.init(7);
	Node n8 = new Node;
	n8.init(8);
	Node n9 = new Node;
	n9.init(9);
	n1.addNeighbour(n3);
	n1.addNeighbour(n2);
	n2.addNeighbour(n3);
	n3.addNeighbour(n6);
	n3.addNeighbour(n5);
	n3.addNeighbour(n4);
	n4.addNeighbour(n2);
	n5.addNeighbour(n7);
	n7.addNeighbour(n8);
	n8.addNeighbour(n9);
	n9.addNeighbour(n5);
	return n1;
}
void bfs(Queue q)
{
	while (!q.isEmpty())
		{
			Node el = q.get();
			printInt(el.getValue());
			List neigh = el.getNeighbours();
			while ((neigh != null))
				{
					Node n = neigh.getHead();
					if (!n.isVisited())
						{
							n.markAsVisited();
							q.put(n);
						}
					else
						;
					neigh = neigh.getTail();
				}
		}
	return;
}


<=======================>
examples\gr5\calculator.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value());
	return 0;
}
Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left = n1;
	res.right = n2;
	return (Node)(res);
}
Node razy(Node n1, Node n2)
{
	Operator res = (Operator)(new Razy);
	res.left = n1;
	res.right = n2;
	return (Node)(res);
}
Node podziel(Node n1, Node n2)
{
	Operator res = (Operator)(new Podziel);
	res.left = n1;
	res.right = n2;
	return (Node)(res);
}
Node minus(Node n1, Node n2)
{
	Operator res = (Operator)(new Minus);
	res.left = n1;
	res.right = n2;
	return (Node)(res);
}
Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v = l;
	return (Node)(res);
}
class Node extends Object
{
	int value()
	{
		error();
		return 0;
	}
}
class Liczba extends Node
{
	int v;
	int value()
	{
		return self.v;
	}
}
class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		error();
		return 0;
	}
	int value()
	{
		return self.operator(self.left.value(), self.right.value());
	}
}
class Plus extends Operator
{
	int operator(int a, int b)
	{
		return (a + b);
	}
}
class Minus extends Operator
{
	int operator(int a, int b)
	{
		return (-b + a);
	}
}
class Razy extends Operator
{
	int operator(int a, int b)
	{
		return (a * b);
	}
}
class Podziel extends Operator
{
	int operator(int a, int b)
	{
		return (a / b);
	}
}


<=======================>
examples\gr5\heapsort.lat
<== Stderr ==>
ERROR
System.Management.Automation.RemoteException
syntax error at line 1, column 1 before `.'
<== Stdout ==>


<=======================>
examples\gr5\heapsort2.lat
<== Stderr ==>
OK
<== Stdout ==>
void maxHeapify(int[] a, int p, int r)
{
	int s = p;
	int v = a[s];
	while (((s * 2) <= r))
		{
			int t = (s * 2);
			if ((t < r))
				if ((a[(t + 1)] > a[t]))
					t = (t + 1);
				else
					;
			else
				;
			if ((v >= a[t]))
				{
					a[s] = v;
					s = (r + 1);
				}
			else
				{
					a[s] = a[t];
					s = t;
				}
		}
	if ((s <= r))
		a[s] = v;
	else
		;
	return;
}
int main()
{
	int n = 0;
	int[] a = null;
	n = readInt();
	a = new int[n];
	int i = 0;
	while ((i < a.length))
		{
			a[i] = readInt();
			i = (i + 1);
		}
	i = ((n + -1) / 2);
	while ((i >= 0))
		{
			maxHeapify(a, i, (n + -1));
			i = (i - 1);
		}
	i = (n + -1);
	while ((i >= 1))
		{
			int tmp = a[i];
			a[i] = a[0];
			a[0] = tmp;
			maxHeapify(a, 0, (i + -1));
			i = (i - 1);
		}
	i = 0;
	while ((i < (n + -1)))
		{
			if ((a[i] > a[(i + 1)]))
				error();
			else
				;
			i = (i + 1);
		}
	{
		int ind_it = 0;
		int[] tab_it = a;
		while ((ind_it < tab_it.length))
			{
				int it = tab_it[ind_it];
				printInt(it);
				ind_it = (ind_it + 1);
			}
	}
	return 0;
}


<=======================>
examples\gr5\lista2Kierunkowa.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int dlugoscListy = 30;
	listaTest(30);
	return 0;
}
void listaTest(int dlugoscListy)
{
	30;
	Lista lista = zwrocListeDlugosci(dlugoscListy);
	Lista odKonca = przejdzSieNaKoniecIWypisuj(lista, dlugoscListy);
	lista = wrocNaPoczatekIWypisuj(odKonca, dlugoscListy);
	printString("po spacerku wartosc pierwszego elementu:");
	printInt(lista.wartosc);
	if ((dlugoscListy >= 5))
		{
			Lista drugi = lista.nastepny;
			printString("po spacerku wartosc drugiego elementu:");
			printInt(lista.nastepny.wartosc);
		}
	else
		{
			return;
		}
	return;
}
Lista przejdzSieNaKoniecIWypisuj(Lista start, int dl)
{
	Lista a = start;
	Lista b = start;
	printString("idziemy na koniec listy: ");
	int i = 0;
	while ((i < dl))
		{
			printInt(a.wartosc);
			b = a;
			a = a.nastepny;
			i = (i + 1);
		}
	return b;
}
Lista wrocNaPoczatekIWypisuj(Lista odKonca, int dl)
{
	Lista a = odKonca;
	Lista b = null;
	printString("wracamy na poczatek listy: ");
	int w = dl;
	while ((w > 0))
		{
			printInt(a.wartosc);
			b = a;
			a = a.poprzedni;
			w = (w - 1);
		}
	return b;
}
class Lista extends Object
{
	Lista poprzedni;
	Lista nastepny;
	int wartosc;
}
Lista zwrocListeDlugosci(int dlugoscListy)
{
	printString("Krotki test listy:");
	Lista start = new Lista;
	Lista a = null;
	Lista n = null;
	a = start;
	int wsk = 1;
	start.wartosc = 0;
	while ((wsk != dlugoscListy))
		{
			start.poprzedni = null;
			a.nastepny = new Lista;
			n = a;
			a = a.nastepny;
			a.wartosc = wsk;
			a.poprzedni = n;
			wsk = (wsk + 1);
		}
	a.nastepny = null;
	printString("wygenerowal liste 2kierunkowa dlugosci :");
	printInt(dlugoscListy);
	printString("__________");
	return start;
}


<=======================>
examples\gr5\mergeSort.lat
<== Stderr ==>
OK
<== Stdout ==>
int main()
{
	int dlugoscListy = 30;
	testMergeSort(30);
	return 0;
}
void testMergeSort(int dlugoscListy)
{
	Lista start = generujTablicoListeDoSortowaniaMerge13co7Malejaco(dlugoscListy, True);
	Lista malejaco = mergeSort(start, 0, dlugoscListy);
	przejdzSieNaKoniecIWypisuj(malejaco, dlugoscListy);
	return;
}
Lista mergeSort(Lista start, int pocz, int kon1Za)
{
	Lista i1 = null;
	Lista i2 = null;
	if (((-pocz + kon1Za) > 1))
		{
			int srodek = (((-pocz + kon1Za) / 2) + pocz);
			i1 = mergeSort(start, pocz, srodek);
			i2 = mergeSort(start, srodek, kon1Za);
			return scalaj(i1, (-pocz + srodek), i2, (-srodek + kon1Za));
		}
	else
		;
	Lista n = new Lista;
	n.wartosc = pokazWartosc(start, pocz);
	return n;
}
Lista scalaj(Lista lj, int ljLength, Lista ld, int ldLength)
{
	int w1 = 0;
	int w2 = 0;
	int ws = 0;
	Lista start = generujTablicoListeDoSortowaniaMerge13co7Malejaco((ljLength + ldLength), False);
	int wart = pokazWartosc(lj, 0);
	int wart2 = pokazWartosc(ld, 0);
	while ((ws < (ljLength + ldLength)))
		{
			if ((w1 == ljLength))
				wart = -1;
			else
				wart = pokazWartosc(lj, w1);
			if ((w2 == ldLength))
				wart2 = -1;
			else
				wart2 = pokazWartosc(ld, w2);
			if ((wart2 > wart))
				{
					w2 = (w2 + 1);
					ladujWartosc(start, ws, wart2);
				}
			else
				{
					w1 = (w1 + 1);
					ladujWartosc(start, ws, wart);
				}
			ws = (ws + 1);
		}
	return start;
}
int pokazWartosc(Lista start, int poz)
{
	int w = 0;
	Lista a = start;
	while ((w != poz))
		{
			a = a.nastepny;
			w = (w + 1);
		}
	return a.wartosc;
}
void ladujWartosc(Lista start, int poz, int wartosc)
{
	int w = 0;
	Lista a = start;
	while ((w != poz))
		{
			a = a.nastepny;
			w = (w + 1);
		}
	a.wartosc = wartosc;
	return;
}
Lista generujTablicoListeDoSortowaniaMerge13co7Malejaco(int dlugoscListy, bool pisz)
{
	if (pisz)
		printString("robimy liste do mergeSorta:");
	else
		;
	Lista start = new Lista;
	Lista a = null;
	Lista n = null;
	a = start;
	int wsk = 1;
	start.wartosc = 0;
	if (pisz)
		printInt(start.wartosc);
	else
		;
	while ((wsk != dlugoscListy))
		{
			start.poprzedni = null;
			a.nastepny = new Lista;
			n = a;
			a = a.nastepny;
			if (((wsk % 5) == 3))
				a.wartosc = (-(wsk / 2) + dlugoscListy);
			else
				a.wartosc = (wsk % 13);
			a.poprzedni = n;
			if (pisz)
				printInt(a.wartosc);
			else
				;
			wsk = (wsk + 1);
		}
	a.nastepny = null;
	if (pisz)
		printString("wygenerowal liste 2kierunkowa dziwna dlugosci :");
	else
		;
	if (pisz)
		printInt(dlugoscListy);
	else
		;
	if (pisz)
		printString("__________");
	else
		;
	return start;
}
Lista przejdzSieNaKoniecIWypisuj(Lista start, int dl)
{
	Lista a = start;
	Lista b = start;
	printString("idziemy na koniec listy (ma byc nierosnaco): ");
	int wsk = 0;
	while ((wsk < dl))
		{
			printInt(a.wartosc);
			b = a;
			a = a.nastepny;
			wsk = (wsk + 1);
		}
	return b;
}
class Lista extends Object
{
	Lista poprzedni;
	Lista nastepny;
	int wartosc;
}


